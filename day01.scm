(module day01
  (include "utils.scm")
  )

(define (next-char cur orig orig-length cursor part)
  (if (eq? part 1)
    (if (null? cur)
      (car orig)
      (car cur)
      )
    (value-at orig 0 (modulo (+ cursor (/ orig-length 2)) orig-length))
    )
  )
(define (count-dups cur orig orig-length cursor part)
  (if (null? (cdr cur))
    (if (eq? (car cur) (next-char (cdr cur) orig orig-length cursor part))
      (string->number (string (car cur)))
      0
      )
    (if (eq? (car cur) (next-char (cdr cur) orig orig-length cursor part))
      (+ (string->number (string (car cur))) (count-dups (cdr cur) orig orig-length (+ 1 cursor) part))
      (+ 0 (count-dups (cdr cur) orig orig-length (+ 1 cursor) part))
      )
    )
  )
(define (day1 in)
  (display (count-dups in in (length in) 0 1))
  (display " <- part 1")
  (display "\n")
  (display (count-dups in in (length in) 0 2))
  (display " <- part 2")
  (display "\n")
  )

(day1 (string->list (read-string (open-input-file "day01in.txt"))))
